name: Gemini AI - General Assistance

on:
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Type of assistance needed'
        required: true
        type: choice
        options:
          - 'code_assistance'
          - 'documentation'
          - 'testing'
          - 'refactoring'
          - 'debugging'
        default: 'code_assistance'

      target:
        description: 'Target file, class, or component'
        required: false
        type: string

      prompt:
        description: 'Specific request or question'
        required: true
        type: string

  issue_comment:
    types: [created]

jobs:
  ai-assistance:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@gemini') &&
       github.event.issue.state == 'open')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '9.x'

    - name: Parse request
      id: parse_request
      run: |
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          COMMENT_BODY="${{ github.event.comment.body }}"
          ACTION_TYPE=$(echo "$COMMENT_BODY" | grep -oP '@gemini\s+\K\w+' || echo "code_assistance")
          PROMPT=$(echo "$COMMENT_BODY" | sed 's/@gemini\s*[a-zA-Z]*\s*//')
          TARGET="${{ github.event.issue.number }}"
        else
          ACTION_TYPE="${{ github.event.inputs.action_type }}"
          PROMPT="${{ github.event.inputs.prompt }}"
          TARGET="${{ github.event.inputs.target }}"
        fi

        echo "action_type=$ACTION_TYPE" >> $GITHUB_OUTPUT
        echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
        echo "target=$TARGET" >> $GITHUB_OUTPUT

    - name: Analyze codebase
      run: |
        echo "Analyzing Maliev.SupplierService codebase..."
        find . -name "*.cs" -type f | head -20
        echo "Solution structure:"
        if [ -f "Maliev.SupplierService.sln" ]; then
          dotnet sln list
        fi

    - name: Generate AI response
      id: ai_response
      run: |
        # Simulate AI processing based on action type
        case "${{ steps.parse_request.outputs.action_type }}" in
          "code_assistance")
            RESPONSE="AI Analysis for code assistance request: ${{ steps.parse_request.outputs.prompt }}"
            ;;
          "documentation")
            RESPONSE="AI-generated documentation suggestions for: ${{ steps.parse_request.outputs.target }}"
            ;;
          "testing")
            RESPONSE="AI recommendations for testing: ${{ steps.parse_request.outputs.prompt }}"
            ;;
          "refactoring")
            RESPONSE="AI refactoring suggestions for: ${{ steps.parse_request.outputs.target }}"
            ;;
          "debugging")
            RESPONSE="AI debugging assistance for: ${{ steps.parse_request.outputs.prompt }}"
            ;;
          *)
            RESPONSE="AI general assistance: ${{ steps.parse_request.outputs.prompt }}"
            ;;
        esac

        echo "response<<EOF" >> $GITHUB_OUTPUT
        echo "$RESPONSE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post response to issue
      if: github.event_name == 'issue_comment'
      run: |
        gh issue comment ${{ steps.parse_request.outputs.target }} --body "ðŸ¤– **Gemini AI Response**

        **Request Type:** ${{ steps.parse_request.outputs.action_type }}

        **Analysis:**
        ${{ steps.ai_response.outputs.response }}

        **Context:** Maliev.SupplierService microservice
        **Timestamp:** $(date)

        *This response was generated by the Gemini AI workflow.*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log AI assistance
      run: |
        echo "AI Assistance Completed:"
        echo "- Action Type: ${{ steps.parse_request.outputs.action_type }}"
        echo "- Target: ${{ steps.parse_request.outputs.target }}"
        echo "- Prompt: ${{ steps.parse_request.outputs.prompt }}"
        echo "- Response: ${{ steps.ai_response.outputs.response }}"