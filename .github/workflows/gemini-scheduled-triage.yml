name: Gemini AI - Scheduled Triage

on:
  schedule:
    # Run every day at 9 AM UTC (Monday to Friday)
    - cron: '0 9 * * 1-5'

  workflow_dispatch:
    inputs:
      scope:
        description: 'Triage scope'
        required: false
        type: choice
        options:
          - 'all_issues'
          - 'unlabeled_issues'
          - 'stale_issues'
          - 'high_priority'
        default: 'unlabeled_issues'

      days_back:
        description: 'Days to look back for issues'
        required: false
        type: string
        default: '7'

jobs:
  scheduled-maintenance:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup parameters
      id: setup
      run: |
        SCOPE="${{ github.event.inputs.scope || 'unlabeled_issues' }}"
        DAYS_BACK="${{ github.event.inputs.days_back || '7' }}"
        DATE_THRESHOLD=$(date -d "$DAYS_BACK days ago" '+%Y-%m-%d')

        echo "scope=$SCOPE" >> $GITHUB_OUTPUT
        echo "days_back=$DAYS_BACK" >> $GITHUB_OUTPUT
        echo "date_threshold=$DATE_THRESHOLD" >> $GITHUB_OUTPUT

    - name: Identify issues for triage
      id: identify_issues
      run: |
        SCOPE="${{ steps.setup.outputs.scope }}"
        DATE_THRESHOLD="${{ steps.setup.outputs.date_threshold }}"

        case "$SCOPE" in
          "unlabeled_issues")
            ISSUES=$(gh issue list --state open --limit 100 --json number,labels | jq -r '.[] | select(.labels | length == 0) | .number')
            ;;
          "stale_issues")
            ISSUES=$(gh issue list --state open --limit 100 --json number,updatedAt | jq -r --arg date "$DATE_THRESHOLD" '.[] | select(.updatedAt < ($date + "T00:00:00Z")) | .number')
            ;;
          "high_priority")
            ISSUES=$(gh issue list --state open --limit 100 --label "priority:high" --json number | jq -r '.[].number')
            ;;
          *)
            ISSUES=$(gh issue list --state open --limit 50 --json number | jq -r '.[].number')
            ;;
        esac

        echo "issues<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        ISSUE_COUNT=$(echo "$ISSUES" | wc -l)
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Process issues
      id: process_issues
      run: |
        ISSUES="${{ steps.identify_issues.outputs.issues }}"
        PROCESSED_COUNT=0
        TRIAGE_SUMMARY=""

        if [ -z "$ISSUES" ] || [ "$ISSUES" = "" ]; then
          echo "No issues found for processing"
          echo "processed_count=0" >> $GITHUB_OUTPUT
          echo "triage_summary=No issues found matching criteria" >> $GITHUB_OUTPUT
          exit 0
        fi

        while IFS= read -r issue_number; do
          if [ -n "$issue_number" ] && [ "$issue_number" != "null" ]; then
            echo "Processing issue #$issue_number"

            # Get issue details
            ISSUE_INFO=$(gh issue view $issue_number --json title,body,labels,state)
            TITLE=$(echo "$ISSUE_INFO" | jq -r '.title')
            BODY=$(echo "$ISSUE_INFO" | jq -r '.body // ""')
            LABELS=$(echo "$ISSUE_INFO" | jq -r '.labels[].name' | tr '\n' ',' | sed 's/,$//')
            STATE=$(echo "$ISSUE_INFO" | jq -r '.state')

            if [ "$STATE" != "OPEN" ]; then
              continue
            fi

            # Simple triage logic
            NEEDS_ATTENTION=false

            # Check if issue has no labels
            if [ -z "$LABELS" ]; then
              NEEDS_ATTENTION=true
              REASON="No labels assigned"
            fi

            # Check for urgent keywords
            if echo "$TITLE $BODY" | grep -iE "(critical|urgent|blocking|production|security)" > /dev/null; then
              NEEDS_ATTENTION=true
              REASON="Contains urgent keywords"
            fi

            if [ "$NEEDS_ATTENTION" = true ]; then
              # Add attention-needed label
              gh issue edit $issue_number --add-label "needs-triage" || echo "Could not add label"

              TRIAGE_SUMMARY="$TRIAGE_SUMMARY\n- Issue #$issue_number: $REASON"
              PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
            fi

            # Rate limiting
            sleep 1
          fi
        done <<< "$ISSUES"

        echo "processed_count=$PROCESSED_COUNT" >> $GITHUB_OUTPUT
        echo "triage_summary<<EOF" >> $GITHUB_OUTPUT
        echo "$TRIAGE_SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check repository health
      id: repo_health
      run: |
        # Count open issues by type
        TOTAL_OPEN=$(gh issue list --state open --limit 1000 | wc -l)
        UNLABELED=$(gh issue list --state open --limit 1000 --json number,labels | jq '[.[] | select(.labels | length == 0)] | length')
        HIGH_PRIORITY=$(gh issue list --state open --label "priority:high" --limit 1000 | wc -l)
        BUGS=$(gh issue list --state open --label "bug" --limit 1000 | wc -l)

        # Check for stale issues (no activity in 30 days)
        STALE_DATE=$(date -d "30 days ago" '+%Y-%m-%d')
        STALE_ISSUES=$(gh issue list --state open --limit 1000 --json number,updatedAt | jq -r --arg date "$STALE_DATE" '[.[] | select(.updatedAt < ($date + "T00:00:00Z"))] | length')

        echo "total_open=$TOTAL_OPEN" >> $GITHUB_OUTPUT
        echo "unlabeled=$UNLABELED" >> $GITHUB_OUTPUT
        echo "high_priority=$HIGH_PRIORITY" >> $GITHUB_OUTPUT
        echo "bugs=$BUGS" >> $GITHUB_OUTPUT
        echo "stale_issues=$STALE_ISSUES" >> $GITHUB_OUTPUT

        # Generate health recommendations
        RECOMMENDATIONS=""
        if [ "$UNLABELED" -gt 5 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS\n- Consider labeling $UNLABELED unlabeled issues"
        fi
        if [ "$HIGH_PRIORITY" -gt 10 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS\n- High number of high-priority issues ($HIGH_PRIORITY) - review priorities"
        fi
        if [ "$STALE_ISSUES" -gt 20 ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS\n- $STALE_ISSUES stale issues detected - consider closing or updating"
        fi

        echo "recommendations<<EOF" >> $GITHUB_OUTPUT
        echo "$RECOMMENDATIONS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create maintenance report
      run: |
        # Create a maintenance report issue
        REPORT_DATE=$(date '+%Y-%m-%d')
        REPORT_TITLE="ðŸ¤– Daily Maintenance Report - $REPORT_DATE"

        REPORT_BODY="## Maliev.SupplierService - Daily Maintenance Report

        **Date:** $REPORT_DATE
        **Scope:** ${{ steps.setup.outputs.scope }}
        **Period:** Last ${{ steps.setup.outputs.days_back }} days

        ### ðŸ“Š Repository Health
        - **Total Open Issues:** ${{ steps.repo_health.outputs.total_open }}
        - **Unlabeled Issues:** ${{ steps.repo_health.outputs.unlabeled }}
        - **High Priority Issues:** ${{ steps.repo_health.outputs.high_priority }}
        - **Bug Reports:** ${{ steps.repo_health.outputs.bugs }}
        - **Stale Issues (30+ days):** ${{ steps.repo_health.outputs.stale_issues }}

        ### ðŸ”„ Triage Actions
        **Issues Processed:** ${{ steps.process_issues.outputs.processed_count }}

        ${{ steps.process_issues.outputs.triage_summary }}

        ### ðŸ’¡ Recommendations
        ${{ steps.repo_health.outputs.recommendations }}

        ### ðŸŽ¯ Service-Specific Notes
        - Monitor supplier integration endpoints
        - Review performance metrics for data processing
        - Check authentication service dependencies
        - Validate database migration status

        ---
        *This report was generated automatically by the Gemini AI scheduled triage workflow.*"

        # Only create report if there's significant activity or it's Monday
        CURRENT_DAY=$(date '+%u')  # 1=Monday, 7=Sunday
        PROCESSED_COUNT=${{ steps.process_issues.outputs.processed_count }}

        if [ "$CURRENT_DAY" = "1" ] || [ "$PROCESSED_COUNT" -gt 0 ]; then
          gh issue create \
            --title "$REPORT_TITLE" \
            --body "$REPORT_BODY" \
            --label "maintenance,automated" || echo "Could not create maintenance report"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log maintenance completion
      run: |
        echo "Scheduled Maintenance Completed:"
        echo "- Scope: ${{ steps.setup.outputs.scope }}"
        echo "- Issues Identified: ${{ steps.identify_issues.outputs.issue_count }}"
        echo "- Issues Processed: ${{ steps.process_issues.outputs.processed_count }}"
        echo "- Total Open Issues: ${{ steps.repo_health.outputs.total_open }}"
        echo "- Timestamp: $(date)"